{"version":3,"sources":["sort4.js"],"names":["minIndex","numbers","index","i","length","swap","array","j","temp","sort","slice","console","log","quickSort","arr","pivotIndex","Math","floor","pivot","splice","left","right","push","concat","mergeSort","k","merge","a","b","countSort","hashTable","max","result"],"mappings":"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","file":"sort4.04984de7.js","sourceRoot":"..\\src","sourcesContent":["//选择排序\r\nlet minIndex = (numbers) => {\r\n  let index = 0\r\n  for (let i = 1; i < numbers.length; i++) {\r\n    if (numbers[i] < numbers[index]) {\r\n      index = i\r\n    }\r\n  }\r\n  return index\r\n}\r\n\r\nlet swap = (array, i, j) => {\r\n  let temp = array[i]\r\n  array[i] = array[j]\r\n  array[j] = temp\r\n}\r\n\r\nlet sort = (numbers) => {\r\n  for (let i = 0; i < numbers.length - 1; i++) {\r\n    let index = minIndex(numbers.slice(i)) + i\r\n    if (index !== i) {\r\n      swap(numbers, index, i)\r\n    }\r\n  }\r\n  console.log('here')\r\n  return numbers\r\n}\r\n\r\nconsole.log(sort([45, 2, 1, 8, 63, 4, 8]))\r\n\r\n//快排\r\nlet quickSort = (arr) => {\r\n  if (arr.length <= 1) {\r\n    return arr\r\n  }\r\n  let pivotIndex = Math.floor(arr.length / 2)\r\n  let pivot = arr.splice(pivotIndex, 1)[0] //splice只删除一个数时返回这个数的数组\r\n  let left = []\r\n  let right = []\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] < pivot) {\r\n      left.push(arr[i])\r\n    } else {\r\n      right.push(arr[i])\r\n    }\r\n  }\r\n  return quickSort(left).concat([pivot], quickSort(right))\r\n}\r\nconsole.log(quickSort([45, 2, 1, 8, 63, 4, 8]))\r\n\r\n//归并排序\r\nlet mergeSort = (arr) => {\r\n  let k = arr.length\r\n  if (k === 1) {\r\n    return arr\r\n  }\r\n  let left = arr.slice(0, Math.floor(k / 2))\r\n  let right = arr.slice(Math.floor(k / 2))\r\n  return merge(mergeSort(left), mergeSort(right))\r\n}\r\nlet merge = (a, b) => {\r\n  if (a.length === 0) {\r\n    return b\r\n  }\r\n  if (b.length === 0) {\r\n    return a\r\n  }\r\n  return a[0] > b[0]\r\n    ? [b[0]].concat(merge(a, b.slice(1)))\r\n    : [a[0]].concat(merge(a.slice(1), b))\r\n}\r\nconsole.log(mergeSort([45, 2, 1, 8, 63, 4, 8]))\r\n\r\n//哈希排序\r\nlet countSort = (arr) => {\r\n  let hashTable = {},\r\n    max = 0,\r\n    result = []\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (!(arr[i] in hashTable)) {\r\n      hashTable[arr[i]] = 1\r\n    } else {\r\n      hashTable[arr[i]] += 1\r\n    }\r\n    if (arr[i] > max) {\r\n      max = arr[i]\r\n    }\r\n  }\r\n  console.log(hashTable)\r\n  for (let j = 0; j <= max; j++) {\r\n    if (j in hashTable) {\r\n      for (let i = 0; i < hashTable[j]; i++) {\r\n        result.push(j)\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\nconsole.log(countSort([45, 2, 1, 8, 63, 4, 8]))\r\n"]}